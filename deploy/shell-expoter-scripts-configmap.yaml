apiVersion: v1
data:
  host_racknum.py: |-
    # -*- coding: utf-8 -*-
    import re
    import sys
    import os
    import openpyxl
    
    arguments = sys.argv
    #current_directory = os.getcwd()
    dir = os.getenv('SCRIPTS_PATH', "/scripts")
    os.chdir(dir)
    
    if len(arguments) > 1 and len(arguments) <= 3:
        if arguments[1] == "-h" or arguments[1] == "--help":
            print("""Usage:
    
    python %s $1 $2 $3
    """ %(arguments[0]))
            exit(0)
        # 将第一个参数赋值给 C
        ip_column = arguments[1]
        rack_column = arguments[2]
        idc_column = arguments[3]
    else:
        ip_column = "B"
        rack_column = "G" 
        idc_column = "M"
    
    # 打印Excel表中的所有表
    workbook = openpyxl.load_workbook('rack-number.xlsx')
    
    # 打印Excel表中的所有表
    #print(workbook.sheetnames)
    
    # 获取指定sheet表
    sheet = workbook['Sheet1']
    
    # 获取活动表
    sheet = workbook.active
    line_num = sheet.max_row
    delimiter = ";"
    for row in range(line_num):
        cell_ip = sheet[ip_column + str(row + 1)].value
        cell_rack = sheet[rack_column +str(row + 1)].value
        cell_idc = sheet[idc_column +str(row + 1)].value
        pattern = r"168\.\d{1,3}\.\d{1,3}\.\d{1,3}"
        parts = cell_ip.split(delimiter)
        for part in parts:
            ipmatches = re.findall(pattern, part)
            for ip in ipmatches:
                idc = cell_idc.split('/')[0]
                format_metrics = 'resources_node_rack_number{host_ip="%s",cluster_idc="%s"} %s' %(ip, idc, cell_rack)
                #print('resources_node_physical_server_info{host_ip="%s",rack_number="%s",cluster_idc="%s"}' %(ip, cell_rack, idc))
                print(format_metrics.encode('utf-8'))
                #print(format_metrics)
kind: ConfigMap
metadata:
  name: shell-expoter-scripts
  namespace: monitorning
